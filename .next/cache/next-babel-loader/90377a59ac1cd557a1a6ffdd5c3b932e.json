{"ast":null,"code":"import config from './config';\nimport axios from 'axios';\n\nvar qs = require('qs');\n\nconst serverUrl = config.baseUrl;\nif (false) if (window.localStorage.getItem('token') !== null) axios.defaults.headers.common['Authorization'] = localStorage.getItem('token_type') + ' ' + localStorage.getItem('token');\nconst Network = {\n  getToken: async () => {\n    return new Promise((resolve, reject) => {\n      var data = qs.stringify({\n        grant_type: 'client_credentials'\n      });\n      axios({\n        url: serverUrl + config.auth,\n        method: 'post',\n        data: data,\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          Authorization: 'Basic ' + btoa('mobile:pin')\n        }\n      }).then(data => {\n        console.log('data', data.data);\n        const authData = data.data;\n        localStorage.setItem('token', authData.access_token);\n        localStorage.setItem('token_type', authData.token_type);\n        return resolve(data); // localStorage.setItem()\n      }).catch(err => reject(err));\n    });\n  },\n  dashboardData: async () => {\n    return new Promise((resolve, reject) => {\n      var data = qs.stringify({\n        channelId: 1,\n        customerId: 1,\n        language: 'ENG',\n        userId: 2,\n        latitude: '22.54410489419337',\n        longitude: '88.35800126798115',\n        storeId: 1\n      });\n      axios({\n        url: serverUrl + config.dashboardData,\n        method: 'post',\n        data: data,\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded' // Authorization: 'Basic ' + btoa('mobile:pin'),\n\n        }\n      }).then(data => {}).catch(err => console.log(err));\n    });\n  }\n};\nexport default Network;","map":{"version":3,"sources":["/home/sagnik/pro/_t/themeforest-eupsXMaK-martfury-multipurpose-marketplace-react-ecommerce-template(1)/martfury_react_package_2_1_0/martfury-react-2.1.0/martfury-react-2.1.0/components/helpers/networks.js"],"names":["config","axios","qs","require","serverUrl","baseUrl","window","localStorage","getItem","defaults","headers","common","Network","getToken","Promise","resolve","reject","data","stringify","grant_type","url","auth","method","Authorization","btoa","then","console","log","authData","setItem","access_token","token_type","catch","err","dashboardData","channelId","customerId","language","userId","latitude","longitude","storeId"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,IAAIC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,MAAMC,SAAS,GAAGJ,MAAM,CAACK,OAAzB;AACA,WACI,IAAIC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,MAAyC,IAA7C,EACIP,KAAK,CAACQ,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IACIJ,YAAY,CAACC,OAAb,CAAqB,YAArB,IACA,GADA,GAEAD,YAAY,CAACC,OAAb,CAAqB,OAArB,CAHJ;AAKR,MAAMI,OAAO,GAAG;AACZC,EAAAA,QAAQ,EAAE,YAAY;AAClB,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAIC,IAAI,GAAGf,EAAE,CAACgB,SAAH,CAAa;AACpBC,QAAAA,UAAU,EAAE;AADQ,OAAb,CAAX;AAGAlB,MAAAA,KAAK,CAAC;AACFmB,QAAAA,GAAG,EAAEhB,SAAS,GAAGJ,MAAM,CAACqB,IADtB;AAEFC,QAAAA,MAAM,EAAE,MAFN;AAGFL,QAAAA,IAAI,EAAEA,IAHJ;AAIFP,QAAAA,OAAO,EAAE;AACL,0BAAgB,mCADX;AAELa,UAAAA,aAAa,EAAE,WAAWC,IAAI,CAAC,YAAD;AAFzB;AAJP,OAAD,CAAL,CASKC,IATL,CASWR,IAAD,IAAU;AACZS,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBV,IAAI,CAACA,IAAzB;AACA,cAAMW,QAAQ,GAAGX,IAAI,CAACA,IAAtB;AACAV,QAAAA,YAAY,CAACsB,OAAb,CAAqB,OAArB,EAA8BD,QAAQ,CAACE,YAAvC;AACAvB,QAAAA,YAAY,CAACsB,OAAb,CAAqB,YAArB,EAAmCD,QAAQ,CAACG,UAA5C;AACA,eAAOhB,OAAO,CAACE,IAAD,CAAd,CALY,CAMZ;AACH,OAhBL,EAiBKe,KAjBL,CAiBYC,GAAD,IAASjB,MAAM,CAACiB,GAAD,CAjB1B;AAkBH,KAtBM,CAAP;AAuBH,GAzBW;AA0BZC,EAAAA,aAAa,EAAE,YAAY;AACvB,WAAO,IAAIpB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAIC,IAAI,GAAGf,EAAE,CAACgB,SAAH,CAAa;AACpBiB,QAAAA,SAAS,EAAE,CADS;AAEpBC,QAAAA,UAAU,EAAE,CAFQ;AAGpBC,QAAAA,QAAQ,EAAE,KAHU;AAIpBC,QAAAA,MAAM,EAAE,CAJY;AAKpBC,QAAAA,QAAQ,EAAE,mBALU;AAMpBC,QAAAA,SAAS,EAAE,mBANS;AAOpBC,QAAAA,OAAO,EAAE;AAPW,OAAb,CAAX;AASAxC,MAAAA,KAAK,CAAC;AACFmB,QAAAA,GAAG,EAAEhB,SAAS,GAAGJ,MAAM,CAACkC,aADtB;AAEFZ,QAAAA,MAAM,EAAE,MAFN;AAGFL,QAAAA,IAAI,EAAEA,IAHJ;AAIFP,QAAAA,OAAO,EAAE;AACL,0BAAgB,mCADX,CAEL;;AAFK;AAJP,OAAD,CAAL,CASKe,IATL,CASWR,IAAD,IAAU,CAAE,CATtB,EAUKe,KAVL,CAUYC,GAAD,IAASP,OAAO,CAACC,GAAR,CAAYM,GAAZ,CAVpB;AAWH,KArBM,CAAP;AAsBH;AAjDW,CAAhB;AAoDA,eAAerB,OAAf","sourcesContent":["import config from './config';\nimport axios from 'axios';\nvar qs = require('qs');\nconst serverUrl = config.baseUrl;\nif (typeof window !== 'undefined')\n    if (window.localStorage.getItem('token') !== null)\n        axios.defaults.headers.common['Authorization'] =\n            localStorage.getItem('token_type') +\n            ' ' +\n            localStorage.getItem('token');\n\nconst Network = {\n    getToken: async () => {\n        return new Promise((resolve, reject) => {\n            var data = qs.stringify({\n                grant_type: 'client_credentials',\n            });\n            axios({\n                url: serverUrl + config.auth,\n                method: 'post',\n                data: data,\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    Authorization: 'Basic ' + btoa('mobile:pin'),\n                },\n            })\n                .then((data) => {\n                    console.log('data', data.data);\n                    const authData = data.data;\n                    localStorage.setItem('token', authData.access_token);\n                    localStorage.setItem('token_type', authData.token_type);\n                    return resolve(data);\n                    // localStorage.setItem()\n                })\n                .catch((err) => reject(err));\n        });\n    },\n    dashboardData: async () => {\n        return new Promise((resolve, reject) => {\n            var data = qs.stringify({\n                channelId: 1,\n                customerId: 1,\n                language: 'ENG',\n                userId: 2,\n                latitude: '22.54410489419337',\n                longitude: '88.35800126798115',\n                storeId: 1,\n            });\n            axios({\n                url: serverUrl + config.dashboardData,\n                method: 'post',\n                data: data,\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    // Authorization: 'Basic ' + btoa('mobile:pin'),\n                },\n            })\n                .then((data) => {})\n                .catch((err) => console.log(err));\n        });\n    },\n};\n\nexport default Network;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import Repository, { baseUrl } from './Repository';\n\nclass CollectionRepository {\n  async getCollections(payload) {\n    let query = '';\n    payload.forEach(item => {\n      if (query === '') {\n        query = `slug_in=${item}`;\n      } else {\n        query = query + `&slug_in=${item}`;\n      }\n    });\n    const reponse = await Repository.get(`${baseUrl}/collections?${query}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getCategoriesBySlug(payload) {\n    let query = '';\n    payload.forEach(item => {\n      if (query === '') {\n        query = `slug_in=${item}`;\n      } else {\n        query = query + `&slug_in=${item}`;\n      }\n    });\n    const reponse = await Repository.get(`${baseUrl}/product-categories?${query}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getProductsByCollectionSlug(slug) {\n    const reponse = await Repository.get(`${baseUrl}/collections?slug_in=${slug}`).then(response => {\n      if (response.data && response.data.length > 0) {\n        return {\n          items: response.data[0].products\n        };\n      } else {\n        return null;\n      }\n\n      return response.data;\n    }).catch(error => {\n      console.log(JSON.stringify(error));\n      return null;\n    });\n    return reponse;\n  }\n\n  async getProductsByCategorySlug(slug) {\n    const reponse = await Repository.get(`${baseUrl}/product-categories?slug_in=${slug}`).then(response => {\n      if (response.data && response.data.length > 0) {\n        return {\n          items: response.data[0].products\n        };\n      } else {\n        return null;\n      }\n\n      return response.data;\n    }).catch(error => {\n      console.log(JSON.stringify(error));\n      return null;\n    });\n    return reponse;\n  }\n\n}\n\nexport default new CollectionRepository();","map":{"version":3,"sources":["/home/sagnik/pro/_t/themeforest-eupsXMaK-martfury-multipurpose-marketplace-react-ecommerce-template(1)/martfury_react_package_2_1_0/martfury-react-2.1.0/martfury-react-2.1.0/repositories/CollectionRepository.js"],"names":["Repository","baseUrl","CollectionRepository","getCollections","payload","query","forEach","item","reponse","get","then","response","data","catch","error","JSON","stringify","getCategoriesBySlug","getProductsByCollectionSlug","slug","length","items","products","console","log","getProductsByCategorySlug"],"mappings":"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","sourcesContent":["import Repository, { baseUrl } from './Repository';\n\nclass CollectionRepository {\n    async getCollections(payload) {\n        let query = '';\n        payload.forEach((item) => {\n            if (query === '') {\n                query = `slug_in=${item}`;\n            } else {\n                query = query + `&slug_in=${item}`;\n            }\n        });\n        const reponse = await Repository.get(`${baseUrl}/collections?${query}`)\n            .then((response) => {\n                return response.data;\n            })\n            .catch((error) => ({ error: JSON.stringify(error) }));\n        return reponse;\n    }\n\n    async getCategoriesBySlug(payload) {\n        let query = '';\n        payload.forEach((item) => {\n            if (query === '') {\n                query = `slug_in=${item}`;\n            } else {\n                query = query + `&slug_in=${item}`;\n            }\n        });\n        const reponse = await Repository.get(\n            `${baseUrl}/product-categories?${query}`\n        )\n            .then((response) => {\n                return response.data;\n            })\n            .catch((error) => ({ error: JSON.stringify(error) }));\n        return reponse;\n    }\n\n    async getProductsByCollectionSlug(slug) {\n        const reponse = await Repository.get(\n            `${baseUrl}/collections?slug_in=${slug}`\n        )\n            .then((response) => {\n                if (response.data && response.data.length > 0) {\n                    return { items: response.data[0].products };\n                } else {\n                    return null;\n                }\n                return response.data;\n            })\n            .catch((error) => {\n                console.log(JSON.stringify(error));\n                return null;\n            });\n        return reponse;\n    }\n\n    async getProductsByCategorySlug(slug) {\n        const reponse = await Repository.get(\n            `${baseUrl}/product-categories?slug_in=${slug}`\n        )\n            .then((response) => {\n                if (response.data && response.data.length > 0) {\n                    return { items: response.data[0].products };\n                } else {\n                    return null;\n                }\n                return response.data;\n            })\n            .catch((error) => {\n                console.log(JSON.stringify(error));\n                return null;\n            });\n        return reponse;\n    }\n}\n\nexport default new CollectionRepository();\n"]},"metadata":{},"sourceType":"module"}
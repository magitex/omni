{"ast":null,"code":"import Repository, { baseUrl } from './Repository';\nimport { convertSlugsQueryString } from '../utilities/product-helper';\n\nclass MediaRespository {\n  async getBannersBySlugs(payload) {\n    let query = '';\n    payload.forEach(item => {\n      if (query === '') {\n        query = `slug_in=${item}`;\n      } else {\n        query = query + `&slug_in=${item}`;\n      }\n    });\n    const reponse = await Repository.get(`${baseUrl}/banners?${query}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getBannersBySlug(payload) {\n    const endPoint = `banners?slug_in=${payload}`;\n    const reponse = await Repository.get(`${baseUrl}/${endPoint}`).then(response => {\n      if (response.data) {\n        return response.data[0].items;\n      } else {\n        return null;\n      }\n    }).catch(error => {\n      console.log(JSON.stringify(error));\n      return null;\n    });\n    return reponse;\n  }\n\n  async getPromotionsBySlug(payload) {\n    const endPoint = `promotions?slug_in=${payload}`;\n    const reponse = await Repository.get(`${baseUrl}/${endPoint}`).then(response => {\n      if (response.data) {\n        return response.data[0].items;\n      } else {\n        return null;\n      }\n    }).catch(error => {\n      console.log(JSON.stringify(error));\n      return null;\n    });\n    return reponse;\n  }\n\n  async getPromotionsBySlugs(payload) {\n    const query = convertSlugsQueryString(payload);\n    const reponse = await Repository.get(`${baseUrl}/promotions?${query}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n}\n\nexport default new MediaRespository();","map":{"version":3,"sources":["/home/sagnik/pro/_t/themeforest-eupsXMaK-martfury-multipurpose-marketplace-react-ecommerce-template(1)/martfury_react_package_2_1_0/martfury-react-2.1.0/martfury-react-2.1.0/repositories/MediaRepository.js"],"names":["Repository","baseUrl","convertSlugsQueryString","MediaRespository","getBannersBySlugs","payload","query","forEach","item","reponse","get","then","response","data","catch","error","JSON","stringify","getBannersBySlug","endPoint","items","console","log","getPromotionsBySlug","getPromotionsBySlugs"],"mappings":"AAAA,OAAOA,UAAP,IAAqBC,OAArB,QAAoC,cAApC;AACA,SAASC,uBAAT,QAAwC,6BAAxC;;AAEA,MAAMC,gBAAN,CAAuB;AACnB,QAAMC,iBAAN,CAAwBC,OAAxB,EAAiC;AAC7B,QAAIC,KAAK,GAAG,EAAZ;AACAD,IAAAA,OAAO,CAACE,OAAR,CAAiBC,IAAD,IAAU;AACtB,UAAIF,KAAK,KAAK,EAAd,EAAkB;AACdA,QAAAA,KAAK,GAAI,WAAUE,IAAK,EAAxB;AACH,OAFD,MAEO;AACHF,QAAAA,KAAK,GAAGA,KAAK,GAAI,YAAWE,IAAK,EAAjC;AACH;AACJ,KAND;AAOA,UAAMC,OAAO,GAAG,MAAMT,UAAU,CAACU,GAAX,CAAgB,GAAET,OAAQ,YAAWK,KAAM,EAA3C,EACjBK,IADiB,CACXC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHiB,EAIjBC,KAJiB,CAIVC,KAAD,KAAY;AAAEA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AAAT,KAAZ,CAJW,CAAtB;AAKA,WAAON,OAAP;AACH;;AAED,QAAMS,gBAAN,CAAuBb,OAAvB,EAAgC;AAC5B,UAAMc,QAAQ,GAAI,mBAAkBd,OAAQ,EAA5C;AACA,UAAMI,OAAO,GAAG,MAAMT,UAAU,CAACU,GAAX,CAAgB,GAAET,OAAQ,IAAGkB,QAAS,EAAtC,EACjBR,IADiB,CACXC,QAAD,IAAc;AAChB,UAAIA,QAAQ,CAACC,IAAb,EAAmB;AACf,eAAOD,QAAQ,CAACC,IAAT,CAAc,CAAd,EAAiBO,KAAxB;AACH,OAFD,MAEO;AACH,eAAO,IAAP;AACH;AACJ,KAPiB,EAQjBN,KARiB,CAQVC,KAAD,IAAW;AACdM,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACC,SAAL,CAAeF,KAAf,CAAZ;AACA,aAAO,IAAP;AACH,KAXiB,CAAtB;AAYA,WAAON,OAAP;AACH;;AAED,QAAMc,mBAAN,CAA0BlB,OAA1B,EAAmC;AAC/B,UAAMc,QAAQ,GAAI,sBAAqBd,OAAQ,EAA/C;AACA,UAAMI,OAAO,GAAG,MAAMT,UAAU,CAACU,GAAX,CAAgB,GAAET,OAAQ,IAAGkB,QAAS,EAAtC,EACjBR,IADiB,CACXC,QAAD,IAAc;AAChB,UAAIA,QAAQ,CAACC,IAAb,EAAmB;AACf,eAAOD,QAAQ,CAACC,IAAT,CAAc,CAAd,EAAiBO,KAAxB;AACH,OAFD,MAEO;AACH,eAAO,IAAP;AACH;AACJ,KAPiB,EAQjBN,KARiB,CAQVC,KAAD,IAAW;AACdM,MAAAA,OAAO,CAACC,GAAR,CAAYN,IAAI,CAACC,SAAL,CAAeF,KAAf,CAAZ;AACA,aAAO,IAAP;AACH,KAXiB,CAAtB;AAYA,WAAON,OAAP;AACH;;AAED,QAAMe,oBAAN,CAA2BnB,OAA3B,EAAoC;AAChC,UAAMC,KAAK,GAAGJ,uBAAuB,CAACG,OAAD,CAArC;AACA,UAAMI,OAAO,GAAG,MAAMT,UAAU,CAACU,GAAX,CAAgB,GAAET,OAAQ,eAAcK,KAAM,EAA9C,EACjBK,IADiB,CACXC,QAAD,IAAc;AAChB,aAAOA,QAAQ,CAACC,IAAhB;AACH,KAHiB,EAIjBC,KAJiB,CAIVC,KAAD,KAAY;AACfA,MAAAA,KAAK,EAAEC,IAAI,CAACC,SAAL,CAAeF,KAAf;AADQ,KAAZ,CAJW,CAAtB;AAOA,WAAON,OAAP;AACH;;AA9DkB;;AAiEvB,eAAe,IAAIN,gBAAJ,EAAf","sourcesContent":["import Repository, { baseUrl } from './Repository';\nimport { convertSlugsQueryString } from '../utilities/product-helper';\n\nclass MediaRespository {\n    async getBannersBySlugs(payload) {\n        let query = '';\n        payload.forEach((item) => {\n            if (query === '') {\n                query = `slug_in=${item}`;\n            } else {\n                query = query + `&slug_in=${item}`;\n            }\n        });\n        const reponse = await Repository.get(`${baseUrl}/banners?${query}`)\n            .then((response) => {\n                return response.data;\n            })\n            .catch((error) => ({ error: JSON.stringify(error) }));\n        return reponse;\n    }\n\n    async getBannersBySlug(payload) {\n        const endPoint = `banners?slug_in=${payload}`;\n        const reponse = await Repository.get(`${baseUrl}/${endPoint}`)\n            .then((response) => {\n                if (response.data) {\n                    return response.data[0].items;\n                } else {\n                    return null;\n                }\n            })\n            .catch((error) => {\n                console.log(JSON.stringify(error));\n                return null;\n            });\n        return reponse;\n    }\n\n    async getPromotionsBySlug(payload) {\n        const endPoint = `promotions?slug_in=${payload}`;\n        const reponse = await Repository.get(`${baseUrl}/${endPoint}`)\n            .then((response) => {\n                if (response.data) {\n                    return response.data[0].items;\n                } else {\n                    return null;\n                }\n            })\n            .catch((error) => {\n                console.log(JSON.stringify(error));\n                return null;\n            });\n        return reponse;\n    }\n\n    async getPromotionsBySlugs(payload) {\n        const query = convertSlugsQueryString(payload);\n        const reponse = await Repository.get(`${baseUrl}/promotions?${query}`)\n            .then((response) => {\n                return response.data;\n            })\n            .catch((error) => ({\n                error: JSON.stringify(error),\n            }));\n        return reponse;\n    }\n}\n\nexport default new MediaRespository();\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { all, put, takeEvery, call } from 'redux-saga/effects';\nimport { polyfill } from 'es6-promise';\nimport ProductRepository from '../../repositories/ProductRepository';\nimport { actionTypes, getProductsError, getProductsSuccess, getSingleProductsSuccess, getTotalProductsSuccess, getProductCategoriesSuccess, getBrandsSuccess, getProductByKeywordsSuccess } from './action';\npolyfill();\n\nfunction* getProducts({\n  payload\n}) {\n  try {\n    const data = yield call(ProductRepository.getRecords, payload);\n    yield put(getProductsSuccess(data));\n  } catch (err) {\n    yield put(getProductsError(err));\n  }\n}\n\nfunction* getTotalOfProducts() {\n  try {\n    const result = yield call(ProductRepository.getTotalRecords);\n    yield put(getTotalProductsSuccess(result));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* getBrands() {\n  try {\n    const result = yield call(ProductRepository.getBrands);\n    yield put(getBrandsSuccess(result));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* getProductCategories() {\n  try {\n    const result = yield call(ProductRepository.getProductCategories);\n    yield put(getProductCategoriesSuccess(result));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* getProductById({\n  id\n}) {\n  try {\n    const product = yield call(ProductRepository.getProductsById, id);\n    yield put(getSingleProductsSuccess(product));\n  } catch (err) {\n    yield put(getProductsError(err));\n  }\n}\n\nfunction* getProductByCategory({\n  category\n}) {\n  try {\n    const result = yield call(ProductRepository.getProductsByCategory, category);\n    yield put(getProductsSuccess(result));\n    yield put(getTotalProductsSuccess(result.length));\n  } catch (err) {\n    yield put(getProductsError(err));\n  }\n}\n\nfunction* getProductByPriceRange({\n  payload\n}) {\n  try {\n    const products = yield call(ProductRepository.getProductsByPriceRange, payload);\n    yield put(getProductsSuccess(products));\n    yield put(getTotalProductsSuccess(products.length));\n  } catch (err) {\n    yield put(getProductsError(err));\n  }\n}\n\nfunction* getProductByBrand({\n  payload\n}) {\n  try {\n    const brands = yield call(ProductRepository.getProductsByBrands, payload);\n    const products = [];\n    brands.forEach(brand => {\n      brand.products.forEach(product => {\n        products.push(product);\n      });\n    });\n    yield put(getProductsSuccess(products));\n    yield put(getTotalProductsSuccess(products.length));\n  } catch (err) {\n    yield put(getProductsError(err));\n  }\n}\n\nfunction* getProductByKeyword({\n  keyword\n}) {\n  try {\n    const searchParams = {\n      title_contains: keyword\n    };\n    const result = yield call(ProductRepository.getRecords, searchParams);\n    yield put(getProductByKeywordsSuccess(result));\n  } catch (err) {\n    yield put(getProductsError(err));\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.GET_PRODUCTS, getProducts)]);\n  yield all([takeEvery(actionTypes.GET_TOTAL_OF_PRODUCTS, getTotalOfProducts)]);\n  yield all([takeEvery(actionTypes.GET_BRANDS, getBrands)]);\n  yield all([takeEvery(actionTypes.GET_PRODUCT_CATEGORIES, getProductCategories)]);\n  yield all([takeEvery(actionTypes.GET_PRODUCTS_BY_CATEGORY, getProductByCategory)]);\n  yield all([takeEvery(actionTypes.GET_PRODUCTS_BY_PRICE_RANGE, getProductByPriceRange)]);\n  yield all([takeEvery(actionTypes.GET_PRODUCTS_BY_BRAND, getProductByBrand)]);\n  yield all([takeEvery(actionTypes.GET_PRODUCTS_BY_KEYWORD, getProductByKeyword)]);\n  yield all([takeEvery(actionTypes.GET_PRODUCT_BY_ID, getProductById)]);\n}","map":null,"metadata":{},"sourceType":"module"}
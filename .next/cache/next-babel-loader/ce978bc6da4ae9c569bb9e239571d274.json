{"ast":null,"code":"import { all, put, takeEvery, call } from 'redux-saga/effects';\nimport { polyfill } from 'es6-promise';\nimport ProductRepository from '../../repositories/ProductRepository';\nimport { actionTypes, getProductsError, getProductsSuccess, getSingleProductsSuccess, getTotalProductsSuccess, getProductCategoriesSuccess, getBrandsSuccess, getProductByKeywordsSuccess } from './action';\npolyfill();\n\nfunction* getProducts({\n  payload\n}) {\n  try {\n    const data = yield call(ProductRepository.getRecords, payload);\n    yield put(getProductsSuccess(data));\n  } catch (err) {\n    yield put(getProductsError(err));\n  }\n}\n\nfunction* getTotalOfProducts() {\n  try {\n    const result = yield call(ProductRepository.getTotalRecords);\n    yield put(getTotalProductsSuccess(result));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* getBrands() {\n  try {\n    const result = yield call(ProductRepository.getBrands);\n    yield put(getBrandsSuccess(result));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* getProductCategories() {\n  try {\n    const result = yield call(ProductRepository.getProductCategories);\n    yield put(getProductCategoriesSuccess(result));\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nfunction* getProductById({\n  id\n}) {\n  try {\n    const product = yield call(ProductRepository.getProductsById, id);\n    yield put(getSingleProductsSuccess(product));\n  } catch (err) {\n    yield put(getProductsError(err));\n  }\n}\n\nfunction* getProductByCategory({\n  category\n}) {\n  try {\n    const result = yield call(ProductRepository.getProductsByCategory, category);\n    yield put(getProductsSuccess(result));\n    yield put(getTotalProductsSuccess(result.length));\n  } catch (err) {\n    yield put(getProductsError(err));\n  }\n}\n\nfunction* getProductByPriceRange({\n  payload\n}) {\n  try {\n    const products = yield call(ProductRepository.getProductsByPriceRange, payload);\n    yield put(getProductsSuccess(products));\n    yield put(getTotalProductsSuccess(products.length));\n  } catch (err) {\n    yield put(getProductsError(err));\n  }\n}\n\nfunction* getProductByBrand({\n  payload\n}) {\n  try {\n    const brands = yield call(ProductRepository.getProductsByBrands, payload);\n    const products = [];\n    brands.forEach(brand => {\n      brand.products.forEach(product => {\n        products.push(product);\n      });\n    });\n    yield put(getProductsSuccess(products));\n    yield put(getTotalProductsSuccess(products.length));\n  } catch (err) {\n    yield put(getProductsError(err));\n  }\n}\n\nfunction* getProductByKeyword({\n  keyword\n}) {\n  try {\n    const searchParams = {\n      title_contains: keyword\n    };\n    const result = yield call(ProductRepository.getRecords, searchParams);\n    yield put(getProductByKeywordsSuccess(result));\n  } catch (err) {\n    yield put(getProductsError(err));\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([takeEvery(actionTypes.GET_PRODUCTS, getProducts)]);\n  yield all([takeEvery(actionTypes.GET_TOTAL_OF_PRODUCTS, getTotalOfProducts)]);\n  yield all([takeEvery(actionTypes.GET_BRANDS, getBrands)]);\n  yield all([takeEvery(actionTypes.GET_PRODUCT_CATEGORIES, getProductCategories)]);\n  yield all([takeEvery(actionTypes.GET_PRODUCTS_BY_CATEGORY, getProductByCategory)]);\n  yield all([takeEvery(actionTypes.GET_PRODUCTS_BY_PRICE_RANGE, getProductByPriceRange)]);\n  yield all([takeEvery(actionTypes.GET_PRODUCTS_BY_BRAND, getProductByBrand)]);\n  yield all([takeEvery(actionTypes.GET_PRODUCTS_BY_KEYWORD, getProductByKeyword)]);\n  yield all([takeEvery(actionTypes.GET_PRODUCT_BY_ID, getProductById)]);\n}","map":{"version":3,"sources":["/home/sagnik/pro/_t/themeforest-eupsXMaK-martfury-multipurpose-marketplace-react-ecommerce-template(1)/martfury_react_package_2_1_0/martfury-react-2.1.0/martfury-react-2.1.0/store/product/saga.js"],"names":["all","put","takeEvery","call","polyfill","ProductRepository","actionTypes","getProductsError","getProductsSuccess","getSingleProductsSuccess","getTotalProductsSuccess","getProductCategoriesSuccess","getBrandsSuccess","getProductByKeywordsSuccess","getProducts","payload","data","getRecords","err","getTotalOfProducts","result","getTotalRecords","console","log","getBrands","getProductCategories","getProductById","id","product","getProductsById","getProductByCategory","category","getProductsByCategory","length","getProductByPriceRange","products","getProductsByPriceRange","getProductByBrand","brands","getProductsByBrands","forEach","brand","push","getProductByKeyword","keyword","searchParams","title_contains","rootSaga","GET_PRODUCTS","GET_TOTAL_OF_PRODUCTS","GET_BRANDS","GET_PRODUCT_CATEGORIES","GET_PRODUCTS_BY_CATEGORY","GET_PRODUCTS_BY_PRICE_RANGE","GET_PRODUCTS_BY_BRAND","GET_PRODUCTS_BY_KEYWORD","GET_PRODUCT_BY_ID"],"mappings":"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","sourcesContent":["import { all, put, takeEvery, call } from 'redux-saga/effects';\nimport { polyfill } from 'es6-promise';\nimport ProductRepository from '../../repositories/ProductRepository';\n\nimport {\n    actionTypes,\n    getProductsError,\n    getProductsSuccess,\n    getSingleProductsSuccess,\n    getTotalProductsSuccess,\n    getProductCategoriesSuccess,\n    getBrandsSuccess,\n    getProductByKeywordsSuccess,\n} from './action';\npolyfill();\n\nfunction* getProducts({ payload }) {\n    try {\n        const data = yield call(ProductRepository.getRecords, payload);\n        yield put(getProductsSuccess(data));\n    } catch (err) {\n        yield put(getProductsError(err));\n    }\n}\n\nfunction* getTotalOfProducts() {\n    try {\n        const result = yield call(ProductRepository.getTotalRecords);\n        yield put(getTotalProductsSuccess(result));\n    } catch (err) {\n        console.log(err);\n    }\n}\n\nfunction* getBrands() {\n    try {\n        const result = yield call(ProductRepository.getBrands);\n        yield put(getBrandsSuccess(result));\n    } catch (err) {\n        console.log(err);\n    }\n}\n\nfunction* getProductCategories() {\n    try {\n        const result = yield call(ProductRepository.getProductCategories);\n        yield put(getProductCategoriesSuccess(result));\n    } catch (err) {\n        console.log(err);\n    }\n}\n\nfunction* getProductById({ id }) {\n    try {\n        const product = yield call(ProductRepository.getProductsById, id);\n        yield put(getSingleProductsSuccess(product));\n    } catch (err) {\n        yield put(getProductsError(err));\n    }\n}\n\nfunction* getProductByCategory({ category }) {\n    try {\n        const result = yield call(\n            ProductRepository.getProductsByCategory,\n            category\n        );\n        yield put(getProductsSuccess(result));\n        yield put(getTotalProductsSuccess(result.length));\n    } catch (err) {\n        yield put(getProductsError(err));\n    }\n}\n\nfunction* getProductByPriceRange({ payload }) {\n    try {\n        const products = yield call(\n            ProductRepository.getProductsByPriceRange,\n            payload\n        );\n        yield put(getProductsSuccess(products));\n        yield put(getTotalProductsSuccess(products.length));\n    } catch (err) {\n        yield put(getProductsError(err));\n    }\n}\n\nfunction* getProductByBrand({ payload }) {\n    try {\n        const brands = yield call(\n            ProductRepository.getProductsByBrands,\n            payload\n        );\n        const products = [];\n        brands.forEach(brand => {\n            brand.products.forEach(product => {\n                products.push(product);\n            });\n        });\n        yield put(getProductsSuccess(products));\n        yield put(getTotalProductsSuccess(products.length));\n    } catch (err) {\n        yield put(getProductsError(err));\n    }\n}\n\nfunction* getProductByKeyword({ keyword }) {\n    try {\n        const searchParams = {\n            title_contains: keyword,\n        };\n        const result = yield call(ProductRepository.getRecords, searchParams);\n        yield put(getProductByKeywordsSuccess(result));\n    } catch (err) {\n        yield put(getProductsError(err));\n    }\n}\n\nexport default function* rootSaga() {\n    yield all([takeEvery(actionTypes.GET_PRODUCTS, getProducts)]);\n    yield all([\n        takeEvery(actionTypes.GET_TOTAL_OF_PRODUCTS, getTotalOfProducts),\n    ]);\n    yield all([takeEvery(actionTypes.GET_BRANDS, getBrands)]);\n    yield all([\n        takeEvery(actionTypes.GET_PRODUCT_CATEGORIES, getProductCategories),\n    ]);\n    yield all([\n        takeEvery(actionTypes.GET_PRODUCTS_BY_CATEGORY, getProductByCategory),\n    ]);\n    yield all([\n        takeEvery(\n            actionTypes.GET_PRODUCTS_BY_PRICE_RANGE,\n            getProductByPriceRange\n        ),\n    ]);\n    yield all([\n        takeEvery(actionTypes.GET_PRODUCTS_BY_BRAND, getProductByBrand),\n    ]);\n    yield all([\n        takeEvery(actionTypes.GET_PRODUCTS_BY_KEYWORD, getProductByKeyword),\n    ]);\n    yield all([takeEvery(actionTypes.GET_PRODUCT_BY_ID, getProductById)]);\n}\n"]},"metadata":{},"sourceType":"module"}
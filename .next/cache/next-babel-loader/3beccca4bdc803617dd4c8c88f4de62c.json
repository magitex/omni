{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from 'react';\nimport ContainerPage from '~/components/layouts/ContainerPage';\nimport BreadCrumb from '~/components/elements/BreadCrumb';\nimport ProductRepository from '~/repositories/ProductRepository.js';\nimport Product from '~/components/elements/products/Product';\nimport ProductGroupGridItems from '~/components/partials/product/ProductGroupGridItems';\n\nconst SearchPage = ({\n  query\n}) => {\n  const {\n    0: pageSize\n  } = useState(100);\n  const {\n    0: keyword,\n    1: setKeyword\n  } = useState('');\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  const {\n    0: productItems,\n    1: setProductItems\n  } = useState(null);\n\n  function handleSetKeyword() {\n    if (query && query.keyword !== '') {\n      setKeyword(query.keyword);\n    } else {\n      setKeyword('');\n    }\n  }\n\n  async function getProductsByKeyword(keyword) {\n    handleSetKeyword();\n    const queries = {\n      _limit: pageSize,\n      title_contains: keyword\n    };\n    setLoading(true);\n    const SPProducts = await ProductRepository.getProducts(queries);\n\n    if (SPProducts) {\n      if (SPProducts.items.length > 0) {\n        setProductItems(SPProducts);\n      } else {\n        setProductItems(null);\n      }\n\n      setTimeout(function () {\n        setLoading(false);\n      }, 500);\n      return SPProducts;\n    } else {\n      setProductItems(null);\n      return null;\n    }\n  }\n\n  useEffect(() => {\n    getProductsByKeyword(query.keyword);\n  }, [query]);\n  const breadcrumb = [{\n    text: 'Home',\n    url: '/'\n  }, {\n    text: 'Search Result'\n  }];\n  let shopItemsView, statusView;\n\n  if (!loading) {\n    if (productItems) {\n      shopItemsView = /*#__PURE__*/_jsx(ProductGroupGridItems, {\n        columns: 6,\n        pageSize: pageSize\n      });\n\n      if (productItems.items.length > 0) {\n        const items = productItems.items.map(item => {\n          return /*#__PURE__*/_jsx(\"div\", {\n            className: \"col-md-3 col-sm-6 col-6\",\n            children: /*#__PURE__*/_jsx(Product, {\n              product: item\n            })\n          }, item.id);\n        });\n        shopItemsView = /*#__PURE__*/_jsx(\"div\", {\n          className: \"ps-product-items row\",\n          children: items\n        });\n        statusView = /*#__PURE__*/_jsxs(\"p\", {\n          children: [/*#__PURE__*/_jsx(\"strong\", {\n            style: {\n              color: '#000'\n            },\n            children: productItems.totalItems\n          }), ' ', \"record(s) found.\"]\n        });\n      } else {\n        shopItemsView = /*#__PURE__*/_jsx(\"p\", {\n          children: \"No product(s) found.\"\n        });\n      }\n    } else {\n      shopItemsView = /*#__PURE__*/_jsx(\"p\", {\n        children: \"No product(s) found.\"\n      });\n    }\n  } else {\n    statusView = /*#__PURE__*/_jsx(\"p\", {\n      children: \"Searching...\"\n    });\n  }\n\n  return /*#__PURE__*/_jsxs(ContainerPage, {\n    title: `Search results for: \"${keyword}\" `,\n    boxed: true,\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      className: \"ps-page\",\n      children: /*#__PURE__*/_jsx(BreadCrumb, {\n        breacrumb: breadcrumb\n      })\n    }), /*#__PURE__*/_jsx(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsx(\"div\", {\n        className: \"ps-shop ps-shop--search\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"container\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"ps-shop__header\",\n            children: /*#__PURE__*/_jsxs(\"h1\", {\n              children: [\"Search result for: \\\"\", /*#__PURE__*/_jsx(\"strong\", {\n                children: keyword\n              }), \"\\\"\"]\n            })\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"ps-shop__content\",\n            children: [statusView, shopItemsView]\n          })]\n        })\n      })\n    })]\n  });\n};\n\nSearchPage.getInitialProps = async ({\n  query\n}) => {\n  return {\n    query: query\n  };\n};\n\nexport default SearchPage;","map":null,"metadata":{},"sourceType":"module"}